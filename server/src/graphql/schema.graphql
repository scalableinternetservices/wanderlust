# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  # subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User
  art (id: Int!): Art
  arts (checkSeen: Boolean): [Art!]!
  user (id: Int!): User
  users (ids: [Int!]): [User!]!
  nearby (loc: LocationInput!, checkSeen: Boolean): [Art!]!
}

type Mutation {
  # Adds an user's art
  addArt (art: ArtInput!): Boolean!
  # Set logged in user as seeing art (from context)
  seeArt (id: Int!): SeeArtResponse
}

# type SeeArtResponse {}

type SeeArtResponse {
  id: Int!
  seen: Boolean!
}

# type Subscription {}

type User {
  id: Int!
  username: String!
  email: String!
  artworkCreated: [Art!]!
  artSeen: [Art!]!
}

type Art{
  id: Int!
  name: String!
  creatorId: Int!
  createdAt: String!
  location: Location!
  uri: String!
  type: ArtType!
  seen: Boolean
}

type Location{
  lat: Float!
  lng: Float!
}

enum ArtType{
  Text
  Image
  Audio
  Video
}

### The code below is from the old stuff

enum UserType { ADMIN, USER }

input ArtInput {
  name: String!
  creatorId: Int!
  location: LocationInput!
  # Must be in the form "data:text/plain;base64, 23f9ojesou8q3jl3f"
  # ie data:mime/type; followed by base64 comma space, then the base64 encoded image, text, etc
  # Currently accepted formats are text/plain, image/jpeg, image/png
  data: String!
}

input LocationInput {
  lat: Float!
  lng: Float!
}
