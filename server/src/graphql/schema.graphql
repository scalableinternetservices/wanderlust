# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  # subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User
  art (id: ID!): Art
  arts: [Art!]!
  user (id: ID!): User
  users: [User!]!
  nearby (loc: LocationInput!): [Art!]!
}

type Mutation {
  # Adds an user's art
  addArt (art: ArtInput!): Boolean!
}

# type Subscription {}

type User {
  id: ID!
	username: String!
	email: String!
	artworkCreated: [Art!]!
	placesVisited: [Location!]!
	artSeen: [Art!]!
}

type Art{
  id: ID!
	name: String!
	creator: User!
	createdAt: String!
	location: Location!
	data: String!
	type: ArtType!
}

type Location{
	lat: Float!
	lng: Float!
}

enum ArtType{
  Text
  Image
  Audio
  Video
}

### The code below is from the old stuff

enum UserType { ADMIN, USER }

input ArtInput {
  name: String!
  creator: String!
  location: LocationInput!
  data: String!
  type: ArtType!
}

input LocationInput {
  lat: Float!
  lng: Float!
}
